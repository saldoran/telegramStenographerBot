"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –º–µ–¥–∏–∞ –∏ —Ç.–¥.)
"""

import os
import logging
import asyncio
from datetime import datetime
from pathlib import Path
from telegram import Voice, VideoNote, PhotoSize, Bot
from telegram.error import TelegramError

logger = logging.getLogger(__name__)


class FileHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, base_dir: str = "downloads"):
        self.base_dir = Path(base_dir)
        self.voice_dir = self.base_dir / "voice_messages"
        self.video_dir = self.base_dir / "video_notes"
        self.photo_dir = self.base_dir / "photos"
        self.media_dir = self.base_dir / "media"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self._create_directories()
    
    def _create_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        for directory in [self.voice_dir, self.video_dir, self.photo_dir, self.media_dir]:
            directory.mkdir(parents=True, exist_ok=True)
        logger.info("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω—ã")
    
    def _get_timestamp_prefix(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        return datetime.now().strftime("%Y%m%d_%H%M%S")
    
    async def download_voice_message(self, voice: Voice, user_id: int, message_id: int) -> str:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = self._get_timestamp_prefix()
            file_name = f"{timestamp}_user{user_id}_msg{message_id}.ogg"
            file_path = self.voice_dir / file_name
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
            file = await voice.get_file()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(str(file_path))
            
            logger.info(f"üéµ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
    
    async def download_video_note(self, video_note: VideoNote, user_id: int, message_id: int) -> str:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–æ—á–∫–∞)"""
        try:
            timestamp = self._get_timestamp_prefix()
            file_name = f"{timestamp}_user{user_id}_msg{message_id}.mp4"
            file_path = self.video_dir / file_name
            
            file = await video_note.get_file()
            await file.download_to_drive(str(file_path))
            
            logger.info(f"üé• –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
    
    async def download_photo(self, photo: PhotoSize, user_id: int, message_id: int) -> str:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            timestamp = self._get_timestamp_prefix()
            file_name = f"{timestamp}_user{user_id}_msg{message_id}.jpg"
            file_path = self.photo_dir / file_name
            
            file = await photo.get_file()
            await file.download_to_drive(str(file_path))
            
            logger.info(f"üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            raise
    
    async def download_media_file(self, file_obj, user_id: int, message_id: int, extension: str = "bin") -> str:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
        try:
            timestamp = self._get_timestamp_prefix()
            file_name = f"{timestamp}_user{user_id}_msg{message_id}.{extension}"
            file_path = self.media_dir / file_name
            
            file = await file_obj.get_file()
            await file.download_to_drive(str(file_path))
            
            logger.info(f"üíæ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def get_file_info(self, file_path: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        try:
            path = Path(file_path)
            if not path.exists():
                return {"exists": False}
            
            stat = path.stat()
            return {
                "exists": True,
                "size": stat.st_size,
                "created": datetime.fromtimestamp(stat.st_ctime),
                "modified": datetime.fromtimestamp(stat.st_mtime),
                "extension": path.suffix,
                "name": path.name
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_path}: {e}")
            return {"exists": False, "error": str(e)}
    
    def cleanup_old_files(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
        try:
            from datetime import timedelta
            cutoff_date = datetime.now() - timedelta(days=days)
            
            deleted_count = 0
            for directory in [self.voice_dir, self.video_dir, self.photo_dir, self.media_dir]:
                for file_path in directory.iterdir():
                    if file_path.is_file():
                        file_time = datetime.fromtimestamp(file_path.stat().st_mtime)
                        if file_time < cutoff_date:
                            try:
                                file_path.unlink()
                                deleted_count += 1
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            return 0
    
    def get_storage_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        try:
            stats = {
                "voice_files": 0,
                "video_files": 0,
                "photo_files": 0,
                "media_files": 0,
                "total_size": 0
            }
            
            directories = {
                "voice_files": self.voice_dir,
                "video_files": self.video_dir,
                "photo_files": self.photo_dir,
                "media_files": self.media_dir
            }
            
            for key, directory in directories.items():
                if directory.exists():
                    for file_path in directory.iterdir():
                        if file_path.is_file():
                            stats[key] += 1
                            stats["total_size"] += file_path.stat().st_size
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            stats["total_size_mb"] = round(stats["total_size"] / (1024 * 1024), 2)
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
            return {}
