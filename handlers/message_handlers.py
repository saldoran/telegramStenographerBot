"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import logging
import os
from datetime import datetime
from telegram import Update, Message
from telegram.ext import ContextTypes
from database.database_manager import DatabaseManager
from utils.file_handler import FileHandler

logger = logging.getLogger(__name__)


class MessageHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, db_manager: DatabaseManager, file_handler: FileHandler):
        self.db_manager = db_manager
        self.file_handler = file_handler
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info(f"üîç –ü–û–õ–£–ß–ï–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï: update.message={update.message is not None}, "
                   f"update.edited_message={update.edited_message is not None}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message and update.message.from_user:
            message = update.message
            user_id = message.from_user.id
            username = message.from_user.username or "–±–µ–∑_username"
            
            logger.info(f"üîç –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: ID={user_id}, username={username}, chat_id={message.chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_tracked = await self.db_manager.is_user_tracked(user_id)
            logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {is_tracked}")
            
            if is_tracked:
                logger.info(f"‚úÖ –ó–ê–ü–£–°–ö–ê–ï–ú –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self._process_message(message)
            else:
                logger.info(f"‚ÑπÔ∏è –ü–†–û–ü–£–°–ö–ê–ï–ú: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            logger.info(f"‚ÑπÔ∏è –ü–†–û–ü–£–°–ö–ê–ï–ú: –Ω–µ—Ç message –∏–ª–∏ from_user")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.edited_message and update.edited_message.from_user:
            await self.handle_edited_message(update, context)
    
    async def _process_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        user_id = message.from_user.id
        chat_id = message.chat_id
        message_id = message.message_id
        
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = message.from_user.username or "–±–µ–∑_username"
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        full_name = f"{first_name} {last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
        display_name = f"@{username}" if username != "–±–µ–∑_username" else full_name
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
        try:
            if message.text:
                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                duplicate_text = f"üí¨ {display_name}: {message.text}"
                await message.get_bot().send_message(
                    chat_id=chat_id,
                    text=duplicate_text,
                    reply_to_message_id=message_id
                )
                
            elif message.voice:
                # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                duration = message.voice.duration
                duplicate_text = f"üéµ {display_name}: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({duration}—Å)"
                await message.get_bot().send_message(
                    chat_id=chat_id,
                    text=duplicate_text,
                    reply_to_message_id=message_id
                )
                
            elif message.video_note:
                # –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ—á–µ–∫)
                duration = message.video_note.duration
                duplicate_text = f"üé• {display_name}: –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ ({duration}—Å)"
                await message.get_bot().send_message(
                    chat_id=chat_id,
                    text=duplicate_text,
                    reply_to_message_id=message_id
                )
                
            elif message.photo:
                # –§–æ—Ç–æ
                caption = message.caption or ""
                if caption:
                    duplicate_text = f"üì∑ {display_name}: {caption}"
                else:
                    duplicate_text = f"üì∏ {display_name}: –§–æ—Ç–æ"
                await message.get_bot().send_message(
                    chat_id=chat_id,
                    text=duplicate_text,
                    reply_to_message_id=message_id
                )
                
            elif message.sticker:
                # –°—Ç–∏–∫–µ—Ä
                emoji = message.sticker.emoji or "‚ùì"
                duplicate_text = f"üé≠ {display_name}: –°—Ç–∏–∫–µ—Ä {emoji}"
                await message.get_bot().send_message(
                    chat_id=chat_id,
                    text=duplicate_text,
                    reply_to_message_id=message_id
                )
                
            elif message.document:
                # –î–æ–∫—É–º–µ–Ω—Ç
                file_name = message.document.file_name or "–î–æ–∫—É–º–µ–Ω—Ç"
                caption = message.caption or ""
                if caption:
                    duplicate_text = f"üìÑ {display_name}: {caption}"
                else:
                    duplicate_text = f"üìÑ {display_name}: {file_name}"
                await message.get_bot().send_message(
                    chat_id=chat_id,
                    text=duplicate_text,
                    reply_to_message_id=message_id
                )
                
            else:
                # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                duplicate_text = f"‚ùì {display_name}: –°–æ–æ–±—â–µ–Ω–∏–µ"
                await message.get_bot().send_message(
                    chat_id=chat_id,
                    text=duplicate_text,
                    reply_to_message_id=message_id
                )
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} ({full_name}, ID: {user_id}) –≤ —á–∞—Ç–µ {chat_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ reply_to
            try:
                error_text = f"‚ùå {display_name}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                await message.get_bot().send_message(chat_id=chat_id, text=error_text)
            except Exception as e2:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e2}")
    
    async def _analyze_message(self, message: Message) -> tuple:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–≥–æ —Ç–∏–ø–∞"""
        content = None
        file_path = None
        file_id = None
        
        if message.text:
            message_type = "text"
            content = message.text
            
        elif message.voice:
            message_type = "voice"
            file_id = message.voice.file_id
            content = f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {message.voice.duration}—Å)"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                file_path = await self.file_handler.download_voice_message(
                    message.voice, message.from_user.id, message.message_id
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
        elif message.video_note:
            message_type = "video_note"
            file_id = message.video_note.file_id
            content = f"–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {message.video_note.duration}—Å)"
            
            try:
                file_path = await self.file_handler.download_video_note(
                    message.video_note, message.from_user.id, message.message_id
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
        elif message.photo:
            message_type = "photo"
            file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            content = "–§–æ—Ç–æ"
            if message.caption:
                content += f" —Å –ø–æ–¥–ø–∏—Å—å—é: {message.caption}"
                
            try:
                file_path = await self.file_handler.download_photo(
                    message.photo[-1], message.from_user.id, message.message_id
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
                
        elif message.video:
            message_type = "video"
            file_id = message.video.file_id
            content = f"–í–∏–¥–µ–æ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {message.video.duration}—Å)"
            if message.caption:
                content += f" —Å –ø–æ–¥–ø–∏—Å—å—é: {message.caption}"
                
        elif message.document:
            message_type = "document"
            file_id = message.document.file_id
            content = f"–î–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}"
            if message.caption:
                content += f" —Å –ø–æ–¥–ø–∏—Å—å—é: {message.caption}"
                
        elif message.audio:
            message_type = "audio"
            file_id = message.audio.file_id
            content = f"–ê—É–¥–∏–æ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {message.audio.duration}—Å)"
            if message.audio.title:
                content += f" - {message.audio.title}"
            if message.caption:
                content += f" —Å –ø–æ–¥–ø–∏—Å—å—é: {message.caption}"
                
        elif message.sticker:
            message_type = "sticker"
            file_id = message.sticker.file_id
            content = f"–°—Ç–∏–∫–µ—Ä: {message.sticker.emoji or '‚ùì'}"
            if message.sticker.set_name:
                content += f" –∏–∑ –Ω–∞–±–æ—Ä–∞ {message.sticker.set_name}"
                
        elif message.animation:
            message_type = "gif"
            file_id = message.animation.file_id
            content = "GIF –∞–Ω–∏–º–∞—Ü–∏—è"
            if message.caption:
                content += f" —Å –ø–æ–¥–ø–∏—Å—å—é: {message.caption}"
                
        elif message.location:
            message_type = "location"
            content = f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {message.location.latitude}, {message.location.longitude}"
            
        elif message.contact:
            message_type = "contact"
            content = f"–ö–æ–Ω—Ç–∞–∫—Ç: {message.contact.first_name}"
            if message.contact.last_name:
                content += f" {message.contact.last_name}"
            if message.contact.phone_number:
                content += f", —Ç–µ–ª: {message.contact.phone_number}"
                
        elif message.poll:
            message_type = "poll"
            content = f"–û–ø—Ä–æ—Å: {message.poll.question}"
            
        else:
            message_type = "other"
            content = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"
        
        return message_type, content, file_path, file_id
    
    async def handle_edited_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        edited_message = update.edited_message
        if not edited_message or not edited_message.from_user:
            return
        
        user_id = edited_message.from_user.id
        chat_id = edited_message.chat_id
        
        logger.info(f"‚úèÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_tracked = await self.db_manager.is_user_tracked(user_id)
        if not is_tracked:
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = edited_message.from_user.username or "–±–µ–∑_username"
        first_name = edited_message.from_user.first_name or ""
        last_name = edited_message.from_user.last_name or ""
        full_name = f"{first_name} {last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        user_info = f"üë§ {full_name}"
        if username != "–±–µ–∑_username":
            user_info += f" (@{username})"
        user_info += f" | ID: {user_id}"
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        try:
            if edited_message.text:
                duplicate_text = f"‚úèÔ∏è **–°–¢–ï–ù–û–ì–†–ê–§ - –û–¢–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–û**\n{user_info}\n\nüìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n{edited_message.text}"
            else:
                duplicate_text = f"‚úèÔ∏è **–°–¢–ï–ù–û–ì–†–ê–§ - –û–¢–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–û**\n{user_info}\n\n‚ùì –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            
            await edited_message.get_bot().send_message(
                chat_id=chat_id,
                text=duplicate_text,
                reply_to_message_id=edited_message.message_id
            )
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ reply_to
            try:
                error_text = f"‚úèÔ∏è **–°–¢–ï–ù–û–ì–†–ê–§ - –û–¢–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–û** (–æ—à–∏–±–∫–∞ reply)\n{user_info}\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏"
                await edited_message.get_bot().send_message(chat_id=chat_id, text=error_text)
            except Exception as e2:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e2}")
