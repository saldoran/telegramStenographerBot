"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import logging
from typing import List, Dict, Any
from telegram import Update
from telegram.ext import ContextTypes
from database.database_manager import DatabaseManager

logger = logging.getLogger(__name__)


class AdminHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, db_manager: DatabaseManager, admin_user_id: int):
        self.db_manager = db_manager
        self.admin_user_id = admin_user_id

    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id == self.admin_user_id

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        logger.info(f"üîß –ö–û–ú–ê–ù–î–ê /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        welcome_text = (
            "ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Stenographer Bot\\!*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\.\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ `/add_user <user_id>` \\- –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ `/remove_user <user_id>` \\- —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ `/list_users` \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ `/get_user_id` \\- —É–∑–Ω–∞—Ç—å User ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ `/status` \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "‚Ä¢ `/help` \\- —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
            "üìù *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å user\\_id:*\n"
            "1\\. –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π `/get_user_id` –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "2\\. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ @userinfobot\n"
            "3\\. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/get_user_id`"
        )
        
        await update.message.reply_text(welcome_text, parse_mode='MarkdownV2')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ *Telegram Stenographer Bot \\- –°–ø—Ä–∞–≤–∫–∞*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ `/start` \\- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "‚Ä¢ `/help` \\- –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ `/status` \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
            "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:*\n"
            "‚Ä¢ `/add_user <user_id>` \\- –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n"
            "  –ü—Ä–∏–º–µ—Ä: `/add_user 123456789`\n"
            "‚Ä¢ `/remove_user <user_id>` \\- —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "  –ü—Ä–∏–º–µ—Ä: `/remove_user 123456789`\n"
            "‚Ä¢ `/list_users` \\- –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ `/get_user_id` \\- —É–∑–Ω–∞—Ç—å User ID \\(–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\\)\n\n"
            "*–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*\n"
            "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "üì§ –°—Ä–∞–∑—É –¥—É–±–ª–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç\n"
            "‚úèÔ∏è –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
            "üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ"
        )
        
        await update.message.reply_text(help_text, parse_mode='MarkdownV2')
    
    async def add_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_user"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\.\n"
                "–ü—Ä–∏–º–µ—Ä: `/add_user 123456789`",
                parse_mode='MarkdownV2'
            )
            return
        
        try:
            user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if await self.db_manager.is_user_tracked(user_id):
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è\\.", parse_mode='MarkdownV2')
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await self.db_manager.add_tracked_user(user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\\.", parse_mode='MarkdownV2')
            logger.info(f"Admin {update.effective_user.id} added user {user_id} to tracking")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def remove_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_user"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\.\n"
                "–ü—Ä–∏–º–µ—Ä: `/remove_user 123456789`",
                parse_mode='MarkdownV2'
            )
            return
        
        try:
            user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not await self.db_manager.is_user_tracked(user_id):
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è\\.", parse_mode='MarkdownV2')
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await self.db_manager.remove_tracked_user(user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\\.", parse_mode='MarkdownV2')
            logger.info(f"Admin {update.effective_user.id} removed user {user_id} from tracking")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def list_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_users"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        tracked_users = await self.db_manager.get_tracked_users()
        
        if not tracked_users:
            await update.message.reply_text("üì≠ –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\.", parse_mode='MarkdownV2')
            return
        
        message = "üë• *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n"
        for i, user_data in enumerate(tracked_users, 1):
            user_id = user_data.get('user_id')
            username = user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            first_name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            last_name = user_data.get('last_name', '')
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
            if username and username != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                username = username.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]").replace("(", "\\(").replace(")", "\\)").replace("~", "\\~").replace("`", "\\`").replace(">", "\\>").replace("#", "\\#").replace("+", "\\+").replace("-", "\\-").replace("=", "\\=").replace("|", "\\|").replace("{", "\\{").replace("}", "\\}").replace(".", "\\.").replace("!", "\\!")
            
            if first_name and first_name != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                first_name = first_name.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]").replace("(", "\\(").replace(")", "\\)").replace("~", "\\~").replace("`", "\\`").replace(">", "\\>").replace("#", "\\#").replace("+", "\\+").replace("-", "\\-").replace("=", "\\=").replace("|", "\\|").replace("{", "\\{").replace("}", "\\}").replace(".", "\\.").replace("!", "\\!")
            
            if last_name:
                last_name = last_name.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]").replace("(", "\\(").replace(")", "\\)").replace("~", "\\~").replace("`", "\\`").replace(">", "\\>").replace("#", "\\#").replace("+", "\\+").replace("-", "\\-").replace("=", "\\=").replace("|", "\\|").replace("{", "\\{").replace("}", "\\}").replace(".", "\\.").replace("!", "\\!")
            
            full_name = f"{first_name} {last_name}".strip() if last_name else first_name
            
            message += f"{i}\\. *ID:* `{user_id}`\n"
            if username and username != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                message += f"   *Username:* @{username}\n"
            message += f"   *–ò–º—è:* {full_name}\n\n"
        
        await update.message.reply_text(message, parse_mode='MarkdownV2')

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            tracked_users_count = len(await self.db_manager.get_tracked_users())
            
            status_text = (
                "üìä *–°—Ç–∞—Ç—É—Å Telegram Stenographer Bot*\n\n"
                f"üü¢ *–°—Ç–∞—Ç—É—Å:* –†–∞–±–æ—Ç–∞–µ—Ç\n"
                f"üë• *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {tracked_users_count}\n"
                f"ü§ñ *–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:* –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                f"üÜî *ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:* `{self.admin_user_id}`\n"
                f"üë§ *–í–∞—à ID:* `{update.effective_user.id}`"
            )
            
        except Exception as e:
            status_text = (
                "üìä *–°—Ç–∞—Ç—É—Å Telegram Stenographer Bot*\n\n"
                f"üî¥ *–°—Ç–∞—Ç—É—Å:* –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                f"‚ùå *–û—à–∏–±–∫–∞:* {str(e)}"
            )
        
        await update.message.reply_text(status_text, parse_mode='MarkdownV2')

    async def get_user_id_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_user_id"""
        # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        
        if update.message.reply_to_message:
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user = update.message.reply_to_message.from_user
            user_info = (
                f"üÜî *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*\n\n"
                f"*User ID:* `{user.id}`\n"
                f"*–ò–º—è:* {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"*–§–∞–º–∏–ª–∏—è:* {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"*Username:* @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"*–¢–∏–ø:* {'–ë–æ—Ç' if user.is_bot else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
            )
            
            await update.message.reply_text(user_info, parse_mode='MarkdownV2')
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å User ID
            admin_info = (
                "üÜî *–ö–∞–∫ —É–∑–Ω–∞—Ç—å User ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?*\n\n"
                "*–°–ø–æ—Å–æ–± 1 \\- —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞:*\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π `/get_user_id` –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
                "*–°–ø–æ—Å–æ–± 2 \\- —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤:*\n"
                "‚Ä¢ @userinfobot \\- –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ @get\\_id\\_bot \\- –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/start`\n"
                "‚Ä¢ @username\\_to\\_id\\_bot \\- –≤–≤–µ–¥–∏—Ç–µ username\n\n"
                "*–°–ø–æ—Å–æ–± 3 \\- –≤ –≥—Ä—É–ø–ø–µ/—á–∞—Ç–µ:*\n"
                "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ —á–∞—Ç\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/get_user_id` –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                f"üÜî *–í–∞—à User ID:* `{update.effective_user.id}`\n"
                f"üë§ *–í–∞—à Username:* @{update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            )
            
            await update.message.reply_text(admin_info, parse_mode='MarkdownV2')
